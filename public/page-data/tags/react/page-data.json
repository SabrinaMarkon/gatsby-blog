{"componentChunkName":"component---src-templates-tag-js","path":"/tags/react/","result":{"data":{"site":{"siteMetadata":{"title":"Sabrina Markon","author":"Sabrina Markon","labels":[{"tag":"react","tech":"React","name":"M12 9.861A2.139 2.139 0 1 0 12 14.139 2.139 2.139 0 1 0 12 9.861zM6.008 16.255l-.472-.12C2.018 15.246 0 13.737 0 11.996s2.018-3.25 5.536-4.139l.472-.119.133.468a23.53 23.53 0 0 0 1.363 3.578l.101.213-.101.213a23.307 23.307 0 0 0-1.363 3.578l-.133.467zM5.317 8.95c-2.674.751-4.315 1.9-4.315 3.046 0 1.145 1.641 2.294 4.315 3.046a24.95 24.95 0 0 1 1.182-3.046A24.752 24.752 0 0 1 5.317 8.95zM17.992 16.255l-.133-.469a23.357 23.357 0 0 0-1.364-3.577l-.101-.213.101-.213a23.42 23.42 0 0 0 1.364-3.578l.133-.468.473.119c3.517.889 5.535 2.398 5.535 4.14s-2.018 3.25-5.535 4.139l-.473.12zm-.491-4.259c.48 1.039.877 2.06 1.182 3.046 2.675-.752 4.315-1.901 4.315-3.046 0-1.146-1.641-2.294-4.315-3.046a24.788 24.788 0 0 1-1.182 3.046zM5.31 8.945l-.133-.467C4.188 4.992 4.488 2.494 6 1.622c1.483-.856 3.864.155 6.359 2.716l.34.349-.34.349a23.552 23.552 0 0 0-2.422 2.967l-.135.193-.235.02a23.657 23.657 0 0 0-3.785.61l-.472.119zm1.896-6.63c-.268 0-.505.058-.705.173-.994.573-1.17 2.565-.485 5.253a25.122 25.122 0 0 1 3.233-.501 24.847 24.847 0 0 1 2.052-2.544c-1.56-1.519-3.037-2.381-4.095-2.381zM16.795 22.677c-.001 0-.001 0 0 0-1.425 0-3.255-1.073-5.154-3.023l-.34-.349.34-.349a23.53 23.53 0 0 0 2.421-2.968l.135-.193.234-.02a23.63 23.63 0 0 0 3.787-.609l.472-.119.134.468c.987 3.484.688 5.983-.824 6.854a2.38 2.38 0 0 1-1.205.308zm-4.096-3.381c1.56 1.519 3.037 2.381 4.095 2.381h.001c.267 0 .505-.058.704-.173.994-.573 1.171-2.566.485-5.254a25.02 25.02 0 0 1-3.234.501 24.674 24.674 0 0 1-2.051 2.545zM18.69 8.945l-.472-.119a23.479 23.479 0 0 0-3.787-.61l-.234-.02-.135-.193a23.414 23.414 0 0 0-2.421-2.967l-.34-.349.34-.349C14.135 1.778 16.515.767 18 1.622c1.512.872 1.812 3.37.824 6.855l-.134.468zM14.75 7.24c1.142.104 2.227.273 3.234.501.686-2.688.509-4.68-.485-5.253-.988-.571-2.845.304-4.8 2.208A24.849 24.849 0 0 1 14.75 7.24zM7.206 22.677A2.38 2.38 0 0 1 6 22.369c-1.512-.871-1.812-3.369-.823-6.854l.132-.468.472.119c1.155.291 2.429.496 3.785.609l.235.02.134.193a23.596 23.596 0 0 0 2.422 2.968l.34.349-.34.349c-1.898 1.95-3.728 3.023-5.151 3.023zm-1.19-6.427c-.686 2.688-.509 4.681.485 5.254.987.563 2.843-.305 4.8-2.208a24.998 24.998 0 0 1-2.052-2.545 24.976 24.976 0 0 1-3.233-.501zM12 16.878c-.823 0-1.669-.036-2.516-.106l-.235-.02-.135-.193a30.388 30.388 0 0 1-1.35-2.122 30.354 30.354 0 0 1-1.166-2.228l-.1-.213.1-.213a30.3 30.3 0 0 1 1.166-2.228c.414-.716.869-1.43 1.35-2.122l.135-.193.235-.02a29.785 29.785 0 0 1 5.033 0l.234.02.134.193a30.006 30.006 0 0 1 2.517 4.35l.101.213-.101.213a29.6 29.6 0 0 1-2.517 4.35l-.134.193-.234.02c-.847.07-1.694.106-2.517.106zm-2.197-1.084c1.48.111 2.914.111 4.395 0a29.006 29.006 0 0 0 2.196-3.798 28.585 28.585 0 0 0-2.197-3.798 29.031 29.031 0 0 0-4.394 0 28.477 28.477 0 0 0-2.197 3.798 29.114 29.114 0 0 0 2.197 3.798z","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"M11.177 25.3a1.94 1.94 0 0 1-.969-.259l-3.086-1.826c-.46-.257-.235-.349-.083-.402.614-.213.739-.262 1.394-.635.069-.038.159-.024.231.018l2.37 1.407a.304.304 0 0 0 .287 0l9.241-5.333a.292.292 0 0 0 .141-.25V7.355a.3.3 0 0 0-.143-.255l-9.237-5.329a.29.29 0 0 0-.285 0L1.803 7.102a.296.296 0 0 0-.146.253v10.666c0 .102.056.198.145.247l2.532 1.462c1.374.687 2.215-.122 2.215-.935V8.265c0-.149.12-.266.269-.266H7.99c.146 0 .267.117.267.266v10.53c0 1.833-.998 2.885-2.736 2.885-.534 0-.955 0-2.129-.579L.969 19.706A1.953 1.953 0 0 1 0 18.02V7.355c0-.693.371-1.339.969-1.684l9.242-5.34a2.023 2.023 0 0 1 1.942 0l9.241 5.34c.599.346.971.992.971 1.684V18.02c0 .693-.372 1.337-.971 1.686l-9.241 5.335a1.942 1.942 0 0 1-.973.259zm2.855-7.348c-4.045 0-4.892-1.857-4.892-3.414 0-.148.118-.266.266-.266h1.195c.133 0 .245.096.265.226.18 1.216.717 1.831 3.164 1.831 1.946 0 2.775-.441 2.775-1.473 0-.596-.234-1.037-3.26-1.334-2.528-.25-4.093-.809-4.093-2.831 0-1.865 1.572-2.977 4.207-2.977 2.961 0 4.425 1.027 4.611 3.233a.27.27 0 0 1-.267.291h-1.2a.266.266 0 0 1-.259-.209c-.288-1.28-.988-1.689-2.886-1.689-2.126 0-2.373.74-2.373 1.295 0 .673.292.869 3.161 1.248 2.84.375 4.19.907 4.19 2.902 0 2.014-1.678 3.167-4.606 3.167z","size":20,"color":"lightgreen"},{"tag":"git","tech":"Git","name":"M23.546 10.93L13.067.452c-.604-.603-1.582-.603-2.188 0L8.708 2.627l2.76 2.76c.645-.215 1.379-.07 1.889.441.516.515.658 1.258.438 1.9l2.658 2.66c.645-.223 1.387-.078 1.9.435.721.72.721 1.884 0 2.604-.719.719-1.881.719-2.6 0-.539-.541-.674-1.337-.404-1.996L12.86 8.955v6.525c.176.086.342.203.488.348.713.721.713 1.883 0 2.6-.719.721-1.889.721-2.609 0-.719-.719-.719-1.879 0-2.598.182-.18.387-.316.605-.406V8.835c-.217-.091-.424-.222-.6-.401-.545-.545-.676-1.342-.396-2.009L7.636 3.7.45 10.881c-.6.605-.6 1.584 0 2.189l10.48 10.477c.604.604 1.582.604 2.186 0l10.43-10.43c.605-.603.605-1.582 0-2.187","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"M0 0h24v24H0V0zm22.034 18.276c-.175-1.095-.888-2.015-3.003-2.873-.736-.345-1.554-.585-1.797-1.14-.091-.33-.105-.51-.046-.705.15-.646.915-.84 1.515-.66.39.12.75.42.976.9 1.034-.676 1.034-.676 1.755-1.125-.27-.42-.404-.601-.586-.78-.63-.705-1.469-1.065-2.834-1.034l-.705.089c-.676.165-1.32.525-1.71 1.005-1.14 1.291-.811 3.541.569 4.471 1.365 1.02 3.361 1.244 3.616 2.205.24 1.17-.87 1.545-1.966 1.41-.811-.18-1.26-.586-1.755-1.336l-1.83 1.051c.21.48.45.689.81 1.109 1.74 1.756 6.09 1.666 6.871-1.004.029-.09.24-.705.074-1.65l.046.067zm-8.983-7.245h-2.248c0 1.938-.009 3.864-.009 5.805 0 1.232.063 2.363-.138 2.711-.33.689-1.18.601-1.566.48-.396-.196-.597-.466-.83-.855-.063-.105-.11-.196-.127-.196l-1.825 1.125c.305.63.75 1.172 1.324 1.517.855.51 2.004.675 3.207.405.783-.226 1.458-.691 1.811-1.411.51-.93.402-2.07.397-3.346.012-2.054 0-4.109 0-6.179l.004-.056z","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"M1.5 0h21l-1.91 21.563L11.977 24l-8.565-2.438L1.5 0zm17.09 4.413L5.41 4.41l.213 2.622 10.125.002-.255 2.716h-6.64l.24 2.573h6.182l-.366 3.523-2.91.804-2.956-.81-.188-2.11h-2.61l.29 3.855L12 19.288l5.373-1.53L18.59 4.414z","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"M14.31.18l.9.2.73.26.59.3.45.32.34.34.25.34.16.33.1.3.04.26.02.2-.01.13V8.5l-.05.63-.13.55-.21.46-.26.38-.3.31-.33.25-.35.19-.35.14-.33.1-.3.07-.26.04-.21.02H8.83l-.69.05-.59.14-.5.22-.41.27-.33.32-.27.35-.2.36-.15.37-.1.35-.07.32-.04.27-.02.21v3.06H3.23l-.21-.03-.28-.07-.32-.12-.35-.18-.36-.26-.36-.36-.35-.46-.32-.59-.28-.73-.21-.88-.14-1.05L0 11.97l.06-1.22.16-1.04.24-.87.32-.71.36-.57.4-.44.42-.33.42-.24.4-.16.36-.1.32-.05.24-.01h.16l.06.01h8.16v-.83H6.24l-.01-2.75-.02-.37.05-.34.11-.31.17-.28.25-.26.31-.23.38-.2.44-.18.51-.15.58-.12.64-.1.71-.06.77-.04.84-.02 1.27.05 1.07.13zm-6.3 1.98l-.23.33-.08.41.08.41.23.34.33.22.41.09.41-.09.33-.22.23-.34.08-.41-.08-.41-.23-.33-.33-.22-.41-.09-.41.09-.33.22zM21.1 6.11l.28.06.32.12.35.18.36.27.36.35.35.47.32.59.28.73.21.88.14 1.04.05 1.23-.06 1.23-.16 1.04-.24.86-.32.71-.36.57-.4.45-.42.33-.42.24-.4.16-.36.09-.32.05-.24.02-.16-.01h-8.22v.82h5.84l.01 2.76.02.36-.05.34-.11.31-.17.29-.25.25-.31.24-.38.2-.44.17-.51.15-.58.13-.64.09-.71.07-.77.04-.84.01-1.27-.04-1.07-.14-.9-.2-.73-.25-.59-.3-.45-.33-.34-.34-.25-.34-.16-.33-.1-.3-.04-.25-.02-.2.01-.13v-5.34l.05-.64.13-.54.21-.46.26-.38.3-.32.33-.24.35-.2.35-.14.33-.1.3-.06.26-.04.21-.02.13-.01h5.84l.69-.05.59-.14.5-.21.41-.28.33-.32.27-.35.2-.36.15-.36.1-.35.07-.32.04-.28.02-.21V6.07h2.09l.14.01.21.03zm-6.47 14.25l-.23.33-.08.41.08.41.23.33.33.23.41.08.41-.08.33-.23.23-.33.08-.41-.08-.41-.23-.33-.33-.23-.41-.08-.41.08-.33.23z","size":20,"color":"deepskyblue"},{"tag":"ruby","tech":"Ruby","name":"M20.156.083c3.033.525 3.893 2.598 3.829 4.77L24 4.822 22.635 22.71 4.89 23.926h.016C3.433 23.864.15 23.729 0 19.139l1.645-3 2.819 6.586.503 1.172 2.805-9.144-.03.007.016-.03 9.255 2.956-1.396-5.431-.99-3.9 8.82-.569-.615-.51L16.5 2.114 20.159.073l-.003.01zM0 19.089v.026-.029.003zM5.13 5.073c3.561-3.533 8.157-5.621 9.922-3.84 1.762 1.777-.105 6.105-3.673 9.636-3.563 3.532-8.103 5.734-9.864 3.957-1.766-1.777.045-6.217 3.612-9.75l.003-.003z","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"M8.851 18.56s-.917.534.653.714c1.902.218 2.874.187 4.969-.211 0 0 .552.346 1.321.646-4.699 2.013-10.633-.118-6.943-1.149M8.276 15.933s-1.028.761.542.924c2.032.209 3.636.227 6.413-.308 0 0 .384.389.987.602-5.679 1.661-12.007.13-7.942-1.218M13.116 11.475c1.158 1.333-.304 2.533-.304 2.533s2.939-1.518 1.589-3.418c-1.261-1.772-2.228-2.652 3.007-5.688 0-.001-8.216 2.051-4.292 6.573M19.33 20.504s.679.559-.747.991c-2.712.822-11.288 1.069-13.669.033-.856-.373.75-.89 1.254-.998.527-.114.828-.093.828-.093-.953-.671-6.156 1.317-2.643 1.887 9.58 1.553 17.462-.7 14.977-1.82M9.292 13.21s-4.362 1.036-1.544 1.412c1.189.159 3.561.123 5.77-.062 1.806-.152 3.618-.477 3.618-.477s-.637.272-1.098.587c-4.429 1.165-12.986.623-10.522-.568 2.082-1.006 3.776-.892 3.776-.892M17.116 17.584c4.503-2.34 2.421-4.589.968-4.285-.355.074-.515.138-.515.138s.132-.207.385-.297c2.875-1.011 5.086 2.981-.928 4.562 0-.001.07-.062.09-.118M14.401 0s2.494 2.494-2.365 6.33c-3.896 3.077-.888 4.832-.001 6.836-2.274-2.053-3.943-3.858-2.824-5.539 1.644-2.469 6.197-3.665 5.19-7.627M9.734 23.924c4.322.277 10.959-.153 11.116-2.198 0 0-.302.775-3.572 1.391-3.688.694-8.239.613-10.937.168 0-.001.553.457 3.393.639","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"M9.93 12.645h4.134L11.996 7.74M11.996.009L.686 3.988l1.725 14.76 9.585 5.243 9.588-5.238L23.308 3.99 11.996.01zm7.058 18.297h-2.636l-1.42-3.501H8.995l-1.42 3.501H4.937l7.06-15.648 7.057 15.648z","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"M1.5 0h21l-1.91 21.563L11.977 24l-8.564-2.438L1.5 0zm7.031 9.75l-.232-2.718 10.059.003.23-2.622L5.412 4.41l.698 8.01h9.126l-.326 3.426-2.91.804-2.955-.81-.188-2.11H6.248l.33 4.171L12 19.351l5.379-1.443.744-8.157H8.531z","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"M7.01 10.207h-.944l-.515 2.648h.838c.556 0 .97-.105 1.242-.314.272-.21.455-.559.55-1.049.092-.47.05-.802-.124-.995-.175-.193-.523-.29-1.047-.29zM12 5.688C5.373 5.688 0 8.514 0 12s5.373 6.313 12 6.313S24 15.486 24 12c0-3.486-5.373-6.312-12-6.312zm-3.26 7.451c-.261.25-.575.438-.917.551-.336.108-.765.164-1.285.164H5.357l-.327 1.681H3.652l1.23-6.326h2.65c.797 0 1.378.209 1.744.628.366.418.476 1.002.33 1.752a2.836 2.836 0 0 1-.305.847c-.143.255-.33.49-.561.703zm4.024.715l.543-2.799c.063-.318.039-.536-.068-.651-.107-.116-.336-.174-.687-.174H11.46l-.704 3.625H9.388l1.23-6.327h1.367l-.327 1.682h1.218c.767 0 1.295.134 1.586.401s.378.7.263 1.299l-.572 2.944h-1.389zm7.597-2.265a2.782 2.782 0 0 1-.305.847c-.143.255-.33.49-.561.703a2.44 2.44 0 0 1-.917.551c-.336.108-.765.164-1.286.164h-1.18l-.327 1.682h-1.378l1.23-6.326h2.649c.797 0 1.378.209 1.744.628.366.417.477 1.001.331 1.751zM17.766 10.207h-.943l-.516 2.648h.838c.557 0 .971-.105 1.242-.314.272-.21.455-.559.551-1.049.092-.47.049-.802-.125-.995s-.524-.29-1.047-.29z","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"M17.18 9.518c-1.263-5.56-4.242-7.387-4.562-8.086C12.266.939 11.885 0 11.885 0c-.002.019-.004.031-.005.049v.013h-.001c-.002.015-.003.025-.004.039v.015h-.002c0 .01-.002.018-.002.026v.026h-.003c-.001.008-.001.018-.003.025v.021h-.002c0 .007 0 .015-.002.021v.02h-.002c0 .01-.001.022-.002.032v.002c-.003.017-.006.034-.009.05v.008h-.002c-.001.004-.003.008-.003.012v.017h-.003v.022h-.005v.018h-.005v.021h-.004v.019h-.004v.017h-.006v.014h-.004v.018h-.004v.014h-.005v.013H11.8v.015h-.004c-.001.001-.001.003-.001.004v.01h-.003c-.001.002-.001.004-.001.006v.006h-.002c-.001.003-.002.008-.002.01-.003.007-.007.014-.01.021v.002c-.002.002-.004.005-.005.007v.008h-.004v.008h-.005v.008h-.003v.01h-.006v.014h-.004v.004h-.004v.008h-.004v.011h-.004v.008h-.006v.011h-.004v.008h-.005v.008h-.003v.01h-.005v.008h-.004v.006h-.004v.008h-.006V.76h-.004v.006h-.005v.008h-.004v.011h-.005v.004h-.003v.008h-.006v.004h-.004v.01h-.004v.004h-.004v.008h-.005v.006h-.003l-.002.004v.004h-.002c-.001.002-.002.002-.002.004v.001h-.001c-.001.003-.002.005-.004.007v.003h-.001c-.005.006-.008.012-.012.018v.001c-.002.002-.007.006-.009.01v.002h-.001c-.001.001-.003.002-.003.003v.003h-.002l-.003.003v.001h-.001c0 .001-.002.002-.003.004v.004h-.003l-.002.002v.002h-.002c0 .002-.002.002-.002.003v.003h-.004c0 .001-.001.002-.002.003V.92h-.003v.004h-.004V.93h-.004v.008h-.005V.93h-.005v.004h-.004V.94h-.005v.008h-.005v.004h-.004v.006h-.004v.004h-.004V.97h-.006v.004h-.004V.98h-.005v.004h-.004v.005h-.005v.01h-.002v.004h-.006v.005h-.004v.002h-.004v.004h-.005v.01h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.005v.004h-.004v.004h-.004v.01h-.004v.005h-.006v.004h-.004v.004h-.005v.006h-.004v.004h-.005v.007h-.004v.004h-.006V1.1h-.002v.004h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.003c-.001.001-.001.002-.001.002v.002h-.002l-.004.004s-.002.002-.004.003v.006h-.004v.005h-.004v.004h-.004v.004h-.003l-.003.003v.003h-.002l-.002.002v.003h-.002c-.005.006-.007.01-.014.016-.002.002-.008.007-.012.01-.012.008-.027.021-.039.032-.008.005-.016.012-.022.017v.001h-.001c-.016.013-.031.025-.049.039v.001c-.024.02-.047.039-.074.062V1.34h-.002c-.057.047-.117.1-.186.159V1.5h-.001c-.169.148-.37.338-.595.568l-.015.015-.004.004C9 3.494 6.857 6.426 6.631 11.164c-.02.392-.016.773.006 1.144v.009c.109 1.867.695 3.461 1.428 4.756v.001c.292.516.607.985.926 1.405v.001c1.102 1.455 2.227 2.317 2.514 2.526.441 1.023.4 2.779.4 2.779l.644.215s-.131-1.701.053-2.522c.057-.257.192-.476.349-.662.106-.075.42-.301.797-.645.018-.019.028-.036.044-.054 1.521-1.418 4.362-4.91 3.388-10.599z","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z","size":20,"color":"deepskyblue"},{"tag":"graphql","tech":"GraphQL","name":"M14.051 2.751l4.935 2.85c.816-.859 2.173-.893 3.032-.077.148.14.274.301.377.477.589 1.028.232 2.339-.796 2.928-.174.1-.361.175-.558.223v5.699c1.146.273 1.854 1.423 1.58 2.569-.048.204-.127.4-.232.581-.592 1.023-1.901 1.374-2.927.782-.196-.113-.375-.259-.526-.429l-4.905 2.832c.372 1.124-.238 2.335-1.361 2.706-.217.071-.442.108-.67.108-1.181.001-2.139-.955-2.14-2.136 0-.205.029-.41.088-.609l-4.936-2.847c-.816.854-2.171.887-3.026.07-.854-.816-.886-2.171-.07-3.026.283-.297.646-.506 1.044-.603l.001-5.699c-1.15-.276-1.858-1.433-1.581-2.584.047-.198.123-.389.224-.566.592-1.024 1.902-1.374 2.927-.782.177.101.339.228.48.377l4.938-2.85C9.613 1.612 10.26.423 11.39.088 11.587.029 11.794 0 12 0c1.181-.001 2.139.954 2.14 2.134.001.209-.03.418-.089.617zm-.515.877c-.019.021-.037.039-.058.058l6.461 11.19c.026-.009.056-.016.082-.023V9.146c-1.145-.283-1.842-1.442-1.558-2.588.006-.024.012-.049.019-.072l-4.946-2.858zm-3.015.059l-.06-.06-4.946 2.852c.327 1.135-.327 2.318-1.461 2.645-.026.008-.051.014-.076.021v5.708l.084.023 6.461-11.19-.002.001zm2.076.507c-.39.112-.803.112-1.192 0l-6.46 11.189c.294.283.502.645.6 1.041h12.911c.097-.398.307-.761.603-1.044L12.597 4.194zm.986 16.227l4.913-2.838c-.015-.047-.027-.094-.038-.142H5.542l-.021.083 4.939 2.852c.388-.404.934-.653 1.54-.653.627 0 1.19.269 1.583.698z","size":20,"color":"hotpink"},{"tag":"gatsby","tech":"Gatsby","name":"M12.001.007C5.326.007.007 5.326.007 12S5.326 23.995 12 23.995s11.994-5.319 11.994-11.994S18.676.007 12.001.007zM2.614 12.105l9.283 9.283c-5.111 0-9.283-4.172-9.283-9.283zm11.473 9.074L2.823 9.915C3.76 5.743 7.516 2.614 12 2.614a9.476 9.476 0 0 1 7.614 3.86L18.259 7.62a7.657 7.657 0 0 0-6.362-3.337A7.555 7.555 0 0 0 4.7 9.393l9.804 9.805c2.4-.835 4.276-2.92 4.798-5.424h-4.068v-1.773h6.154c0 4.485-3.129 8.24-7.301 9.178z","size":20,"color":"rebeccapurple"},{"tag":"apache","tech":"Apache","name":"M 6.45,13.32\n      C 6.30,13.05 5.91,12.77 5.62,12.66\n        5.87,13.16 6.14,13.44 6.34,14.02\n        6.38,14.14 6.49,14.45 6.38,14.55\n        6.32,14.61 6.21,14.59 6.13,14.57\n        5.91,14.54 5.76,14.48 5.55,14.41\n        5.67,14.67 5.96,14.80 6.21,14.92\n        5.91,15.01 5.40,15.23 5.23,15.51\n        5.64,15.37 6.09,15.17 6.52,15.27\n        6.52,15.27 5.56,18.16 5.56,18.16\n        5.56,18.16 5.00,20.00 5.00,20.00\n        5.11,19.96 5.18,19.93 5.26,19.84\n        5.38,19.69 5.56,19.01 5.63,18.79\n        5.63,18.79 6.72,15.51 6.72,15.51\n        7.68,12.68 9.11,9.14 10.44,6.48\n        10.44,6.48 11.70,4.18 11.70,4.18\n        11.70,4.18 12.30,3.16 12.30,3.16\n        12.26,3.41 11.84,4.03 11.69,4.30\n        11.69,4.30 10.40,6.80 10.40,6.80\n        10.40,6.80 9.79,8.12 9.79,8.12\n        9.14,9.56 8.55,11.03 7.99,12.50\n        7.99,12.50 6.95,15.43 6.95,15.43\n        7.22,15.63 7.35,15.80 7.50,16.09\n        7.61,15.81 7.40,15.48 7.23,15.27\n        8.16,15.27 9.46,15.03 9.77,13.98\n        9.77,13.98 9.34,14.28 9.34,14.28\n        9.34,14.28 8.83,14.38 8.83,14.38\n        9.50,14.02 9.80,13.88 10.23,13.20\n        10.34,13.04 10.41,12.92 10.47,12.73\n        10.47,12.73 10.00,13.09 10.00,13.09\n        9.51,13.43 8.94,13.58 8.36,13.48\n        8.36,13.48 8.75,13.36 8.75,13.36\n        9.06,13.25 9.46,13.04 9.73,12.86\n        10.75,12.16 11.35,11.17 11.80,10.04\n        11.92,9.74 12.12,9.24 12.19,8.95\n        12.19,8.95 11.76,9.06 11.76,9.06\n        12.24,8.69 12.56,8.39 12.81,7.81\n        12.81,7.81 12.15,8.09 12.15,8.09\n        12.36,7.94 12.55,7.81 12.73,7.62\n        13.04,7.27 13.45,6.37 13.48,5.90\n        13.48,5.90 12.73,6.17 12.73,6.17\n        13.47,5.73 13.71,5.26 14.11,4.53\n        14.55,3.74 14.99,2.80 15.00,1.88\n        15.01,1.24 14.94,0.72 14.45,0.26\n        14.29,0.12 14.13,0.02 13.91,0.00\n        13.51,-0.02 13.15,0.33 12.89,0.59\n        12.25,1.23 11.70,1.97 11.16,2.70\n        9.65,4.72 8.10,7.46 7.25,9.84\n        7.06,10.37 6.79,11.36 6.69,11.91\n        6.69,11.91 6.55,12.81 6.55,12.81\n        6.51,13.04 6.55,13.10 6.45,13.32 Z","size":20,"color":"#C92037"},{"tag":"windows","tech":"Windows","name":"M 12.00,4.00\n      C 12.00,4.00 12.00,12.00 12.00,12.00\n        12.00,12.00 23.00,12.00 23.00,12.00\n        23.00,12.00 23.00,4.00 23.00,4.00\n        23.00,4.00 12.00,4.00 12.00,4.00 Z\n      M 2.00,6.00\n      C 2.00,6.00 2.00,12.00 2.00,12.00\n        2.00,12.00 11.00,12.00 11.00,12.00\n        11.00,12.00 11.00,6.00 11.00,6.00\n        11.00,6.00 2.00,6.00 2.00,6.00 Z\n      M 2.00,14.00\n      C 2.00,14.00 2.00,21.00 2.00,21.00\n        2.00,21.00 11.00,21.00 11.00,21.00\n        11.00,21.00 11.00,14.00 11.00,14.00\n        11.00,14.00 2.00,14.00 2.00,14.00 Z\n      M 12.00,14.00\n      C 12.00,14.00 12.00,22.00 12.00,22.00\n        12.00,22.00 23.00,22.00 23.00,22.00\n        23.00,22.00 23.00,14.00 23.00,14.00\n        23.00,14.00 12.00,14.00 12.00,14.00 Z","size":20,"color":"deepskyblue"}]}},"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"excerpt":"useRef is a React hook that mutates the current value of a variable that we can optionally initialize with an initial value or leave undefined. Its major difference to the useState hook is that it…","html":"<p><strong>useRef</strong> is a React hook that mutates the current value of a variable that we can optionally initialize with an initial value or leave undefined. Its major difference to the useState hook is that it only updates the value of the variable, but does <strong>not</strong> update state. Consequently, useRef does not cause a re-render like useState does, and we can use it when storing a value in state is neither wanted or necessary.</p>\n<h1></h1>\n<p>We create a ref for a React functional component like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const wasClicked = useRef(false);</code></pre></div>\n<h1></h1>\n<p>And we mutate its value using its current property:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">wasClicked.current = true;</code></pre></div>\n<h1></h1>\n<p>If you noticed that wasClicked is a constant, yet we are mutating a value, it is because we are updating the property called \"current\", not mutating the wasClicked object reference itself.\nThe functional component below uses a useRef hook. What will be logged to the console? What will appear in the webpage itself (DOM)?</p>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useRef } from &quot;react&quot;;\n\nconst clickButton = () =&gt; {\nconst wasClicked = useRef(&quot;Not Clicked Yet&quot;);\nconst onClick = () =&gt; {\n    wasClicked.current = &quot;Clicked&quot;;\n    console.log(&quot;Has clicked button? &quot; + wasClicked.current);\n};\n\nreturn (\n    &lt;&gt;\n    &lt;p&gt;The value of wasClicked is: {wasClicked.current}&lt;/p&gt;\n    &lt;button onClick={onClick}&gt;Click Me&lt;/button&gt;\n    &lt;/&gt;\n);\n};\n\nexport default clickButton;</code></pre></div>\n<h1></h1>\n<p>The code above will update the <strong>value</strong> of wasClicked and log it to the console, however it will not cause the page to re-render, so the text in the DOM stays the <strong>same</strong>.</p>\n<ul>\n<li>Console when the component mounts for the first time: nothing in the console</li>\n<li>DOM when the component mounts for the first time: \"The value of wasClicked is: Not Clicked Yet\"</li>\n<li>Console when the button is clicked: \"Has clicked button? Clicked\"</li>\n<li>DOM when the button is clicked: \"The value of wasClicked is: Not Clicked Yet\".</li>\n</ul>\n<p>The <strong>ref</strong> is mutated when the button is clicked, but it does <strong>not</strong> trigger the DOM to be re-rendered, <strong>unlike</strong> when we use useState.</p>\n<p>So what would useRef be good for?</p>\n<p>Well, if we wanted to track a state value that changes but shouldn't cause a re-render, we can create a useRef hook to use it as an <strong>instance variable</strong>.\nA good use of this, for example, would be a situation where we want to run certain code whenever a component updates, but not when the component is first rendered.</p>\n<p>For most situations, we would use the useEffect hook to automatically execute the code when the component updates.</p>\n<p>On the other hand, however, the useEffect hook is also triggered when a component is <strong>first mounted</strong>, which therefore doesn't meet our requirement above.</p>\n<p>In the below code, you can see how we create a variable, using the useRef hook, called firstRender, whose value defaults to true, but is changed to false when the component re-renders. The useEffect hook runs every time a component is rendered or re-rendered, so if we don't want it to run that first time when the component is rendered for the first time, we can check the ref variable firstRender to make sure its value is false before running the code.</p>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState, useRef, useEffect } from &#39;react&#39;;\n\nexport default function ComponentWithRefInstanceVariable() {\n  const [count, setCount] = useState(0);\n \n  function onClick() {\n    setCount(count + 1);\n  }\n \n  const isFirstRender = useRef(true);\n \n  useEffect(() =&gt; {\n    if (isFirstRender.current) {\n\n      /* \n      * This is the first time the component is mounted, so DO NOT run the\n      * code (in the else statement). Set isFirstRender to false though\n      * for when the component loads again.\n      */\n\n      isFirstRender.current = false;\n\n    } else {\n      // this won&#39;t run if isFirstRender.current = true, which is only\n      // when the component is FIRST rendered. \n      console.log(\n        `\n          I am a useEffect hook&#39;s logic\n          which runs for a component&#39;s\n          re-render.\n        `\n      );\n    }\n  });\n \n  return (\n    &lt;&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n \n      &lt;button type=&quot;button&quot; onClick={onClick}&gt;\n        Increase\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n// Code example (Wieruch, 2020). </code></pre></div>\n<h1></h1>\n<p>The useRef hook is frequently used with DOM elements in order to get their values out without having to store them in state. The useRef hook contains a reference to a DOM node which we can then access directly. This is the <strong>React way of accessing an HTML element</strong> instead of using things like getElementById.</p>\n<p>In the below code example, you can see how we can make a useRef object we name inputRef, and pass inputRef to the ref attribute of a text input field. Now, we can access the value of the text field with the inputRef object's <strong>current</strong> property, <strong>inputRef.current</strong>.</p>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  // ComponentWithRefForDOMElement component.\nimport React, { useRef } from &#39;react&#39;;\n\nexport default function ComponentWithRefForDOMElement() {\n\nconst inputRef = useRef();\n\nfunction onSubmit(event) {\n    event.preventDefault();\n\n    // Will log the current value of the text field to the console.\n    console.log(inputRef.current.value); // whatever you&#39;ve typed in the field.\n\n    // Will log which DOM node inputRef refers to, along with its attributes, \n    // including name, id, style, etc. if present.\n    console.log(inputRef.current); // &lt;input type=&quot;text&quot; id=&quot;lol&quot; style=&quot;color: red;&quot;&gt;\n\n    // Changes the style of the inputRef&#39;s text to blue!\n    inputRef.current.style = &quot;color: blue&quot;;\n}\n\nreturn (\n    &lt;&gt;\n    {/* &lt;p&gt;{inputRef.current.value}&lt;/p&gt; */}\n    &lt;form onSubmit={onSubmit}&gt;\n        &lt;input type=&quot;text&quot; id=&quot;lol&quot; style={{ color: &quot;red&quot; }} ref={inputRef} /&gt;\n    &lt;/form&gt;\n    &lt;/&gt;\n);\n} </code></pre></div>\n<h1></h1>\n<p>Observe that while we can log the inputRef to the console or change styles, a change in value that we type is not updated in the DOM (where we have &#x3C;p>{inputRef.current.value}&#x3C;/p>).</p>\n<p>That is, we cannot see the changes to value in the DOM, and get an error when the component loads if we try to access it if the initial value is undefined. If the initial state is not undefined, we still see nothing in the DOM.</p>\n<h3>forwardRef:</h3>\n<p>Above, we only need to include the useRef hook by adding the ref attribute to the input field (the ref={inputRef} part), but what do we do when the DOM nodes we need to access are in a <strong>child component</strong> instead? That is, how would we access the input field in a case like this, where the input field is actually inside a child component instead of directly in the return statement of the ComponentWithRefForDOMElement component?</p>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ComponentWithRefForDOMElement component.\nimport React, { useRef } from &#39;react&#39;;\n\nimport ChildComponentWithTheInputField from &#39;./ChildComponentWithTheInputField&#39;;\n\nexport default function ComponentWithRefForDOMElement() {\n\nconst inputRef = useRef();\n\nfunction onSubmit(event) {\n    event.preventDefault();\n\n    // Will log the current value of the text field to the console.\n    console.log(inputRef.current.value); // whatever you&#39;ve typed in the field.\n\n    // Will log which DOM node inputRef refers to, along with its attributes, \n    // including name, id, style, etc. if present.\n    console.log(inputRef.current); // &lt;input type=&quot;text&quot; id=&quot;lol&quot; style=&quot;color: red;&quot;&gt;\n\n    // Changes the style of the inputRef&#39;s text to blue!\n    inputRef.current.style = &quot;color: blue&quot;;\n}\n\nreturn (\n    &lt;&gt;\n    {/* &lt;p&gt;{inputRef.current.value}&lt;/p&gt; */}\n    &lt;form onSubmit={onSubmit}&gt;\n        &lt;ChildComponentWithTheInputField id=&quot;lol&quot; style={{ color: &quot;red&quot; }} ref={inputRef} /&gt;\n    &lt;/form&gt;\n    &lt;/&gt;\n);\n} \n\n////////////////////////////////////////////////////////////////////\n\n// ChildComponentWithTheInputField\nimport React from &#39;react&#39;;\n\nconst ChildComponentWithTheInputField = () =&gt; {\nreturn (\n    &lt;input /&gt;;\n);\n}\n\nexport default ChildComponentWithTheInputField;</code></pre></div>\n<h1></h1>\n<p>See how we have \"ChildComponentWithTheInputField\" in the parent component's (ComponentWithRefForDOMElement) return statement instead of &#x3C;input type=\"text\" id=\"lol\" style={{ color: \"red\" }} ref={inputRef} />? How do we use refs in this situation to access the input DOM node? we don't have access to the references directly!</p>\n<p>Well, it turns out that all we have to do is pass the ref as another parameter to the child component after the props (either as ...props or destructured below as {type, id, style}), then we can include the ref in the atttributes of the input field in the child component's (ChildComponentWithTheInputField) return statement.</p>\n<p>Then, we create a constant of the child component that we export as a forwarded ref instead of the child component directly.</p>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ChildComponentWithTheInputField\nimport React from &#39;react&#39;;\n\nconst ChildComponentWithTheInputField = ({type, id, style}, ref) =&gt; {\n    return (\n    &lt;input ref={ref} type={type} id={id} style={style} /&gt;;\n    );\n}\n\nconst forwardedChildComponentRef = React.forwardRef(ChildComponentWithTheInputField);\n\nexport default forwardedChildComponentRef;</code></pre></div>\n<h1></h1>\n<p>Thus, forwardRef is just when we need to forward a reference into a component. Nothing needs to change in the parent component, and all we need to do in the child is to add a ref parameter and create a forwardRef version of the child component to export for use in other components (such as the parent).</p>","id":"1cf82b18-4410-516c-ac5c-66fbe3d324fd","frontmatter":{"title":"React Hooks: useRef()","date":"June, 2020","tags":["javascript","react"]},"fields":{"slug":"/react-hooks-useref/"}}},{"node":{"excerpt":"React functional components use the useState React hook to keep track of \"stateful\" values, or variable value changes that we need to keep track of in our application.\nIn the code below, you can see a…","html":"<p>React functional components use the <strong>useState</strong> React hook to keep track of \"stateful\" values, or variable value changes that we need to keep track of in our application.\nIn the code below, you can see a typical example of a useState hook.</p>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let initialState = 0;\nconst [count, setCount] = useState(initialState);</code></pre></div>\n<h1></h1>\n<p>The useState hook is passed an optional initialState parameter, and is assigned to a destructured array that tells us the stateful variable's name our program can use, along with a \"set\" function that our program can use to update that variable's value.</p>\n<h1></h1>\n<ol>\n<li><strong>let initialState = 0</strong> is the optional starting value of the count variable.</li>\n<li><strong>count</strong> is the name of the stateful value our program needs to read and update.</li>\n<li>\n<p><strong>setCount</strong> is the name of the declarative function we will call that will automatically update the value of count for us to whatever we tell it to.</p>\n<h1></h1>\n<p>So, in our program, if want to increment count whenever we click a button, the onClick function would call setCount(newCount) where newCount = ++count;\nHere is an example of a functional component using useState to keep track of a counter:</p>\n<h1></h1>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/* When the &quot;Click Me&quot; button is clicked, the onClick event fires\n * and the incrementCount function is called that uses setCount to \n * increment the count variable. */\n\nimport React, { useState } from &#39;react&#39;;\n\nconst Counter = () =&gt; {\n  const [count, setCount] = useState(0);\n  const incrementCount = () =&gt; setCount(count + 1);\n\n  return (\n    &lt;&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={incrementCount}&gt;Click Me&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default Counter;</code></pre></div>\n<h1></h1>\n<p>So for each stateful variable your program needs, the <strong>generalized</strong> format to set up the useState hook is:</p>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const [state, setState] = useState(initialState);</code></pre></div>","id":"33a7803e-b67c-5ed1-9b1f-ed81bf40ab20","frontmatter":{"title":"React Hooks: useState()","date":"June, 2020","tags":["javascript","react"]},"fields":{"slug":"/react-hooks-usestate/"}}},{"node":{"excerpt":"I was even more surprised and delighted with how easy and fun Gatsby is than I expected from reviews! Setting up the development environment is a piece of cake, as is applying a theme and customizing…","html":"<p>I was even more surprised and delighted with how easy and fun Gatsby is than I expected from reviews! Setting up the development environment is a piece of cake, as is applying a theme and customizing it in my own happy little way.</p>\n<p>Deployment is simple too, except I did run across one small wrinkle!</p>\n<p>I wanted to run my blog in a subfolder off the root of my domain, so I could still have my portfolio on the main domain, then allow people to click a button to get to my blog in the /blog subfolder. I expected that I could simply build then upload the contents of Gatsby's /public folder to /blog. That is how it usually works!</p>\n<p>It turned out that once I ran the build, however, Gatsby defaults to the assumption that the site is in the root folder, which causes <strong>relative links to static assets to break</strong>. So, the picture of my face on the sidebar disappeared, and the pagination links failed, for instance. </p>\n<p>No worries though!</p>\n<p>If this happens to you, it is only a few super short, easy steps to fix!</p>\n<h1></h1>\n<ol>\n<li>\n<p>Open your gatsby-config.js file and add the following in the module.exports section:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n pathPrefix: `/blog`,\n}</code></pre></div>\n</li>\n<li>\n<p>In your shell, build Gatsby with the --prefix-paths option. If you don't do this, Gatsby will again default to the root folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gatsby build --prefix-paths</code></pre></div>\n</li>\n<li>According to the <a href=\"https://www.gatsbyjs.org/docs/path-prefix%20Gatsby%20Documentation\">Gatsby Documentation</a>, you can now serve your Gatsby site with the --prefix-paths flag as well, like:</li>\n</ol>\n<h1></h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gatsby serve --prefix-paths</code></pre></div>\n<h1></h1>\n<p>   My domain lives on my dedicated LAMP server with cPanel, so because the Apache web server is already available to the directory, I don't use the serve command. Rather, I simply upload the contents of Gatsby's /public folder directly into my /blog subfolder for my domain. The serve command with --prefix-paths would normally be required, but I want to make sure that people who want to host their site on cPanel know how easy it is for them to deploy Gatsby as well!</p>\n<p>I'd love to hear about your experiences with Gatsby if you have discovered any interesting goodies, or even if you have a problem you'd like help solving that we could solve together!</p>\n<p>Sabrina</p>","id":"94b55579-eaae-544a-8475-7d1009ea0eeb","frontmatter":{"title":"Deploying Gatsby to a Subfolder","date":"March, 2020","tags":["gatsby","javascript","react"]},"fields":{"slug":"/deploying-gatsby-to-a-subfolder/"}}}]}},"pageContext":{"tag":"react"}}}